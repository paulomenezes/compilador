package compiler.syntax;

import java_cup.runtime.*;
import java.util.*;
import compiler.tree.*;
import compiler.tree.expressao.*;
import compiler.tree.comando.*;

/*****  Terminais (tokens) *****/

terminal String IDENTIFICADOR;
    
terminal Object    IGUAL_QUE;
terminal Object    DIFERENTE_QUE;
terminal Object    MAIOR_QUE;
terminal Object    MENOR_QUE;
terminal Object    MAIOR_OU_IGUAL;
terminal Object    MENOR_OU_IGUAL;
    
terminal Object    SOMA;
terminal Object    SUB;
terminal Object    MULT;
terminal Object    DIV;
terminal Object    RESTO;
terminal Object    AND;
terminal Object    OR;
terminal Object    NOT;
    
terminal Object    ATRIBUICAO;
    
terminal Object    ABRE_PAR;
terminal Object    FECHA_PAR;
terminal Object    ABRE_CHAVE;
terminal Object    FECHA_CHAVE;
terminal Object    VIRGULA;
terminal Object    PONTO_VIRGULA;
terminal Object    DOIS_PONTOS;
    
terminal String    INT_LITERAL;
terminal String    FLOAT_LITERAL;
terminal String    CHAR_LITERAL;
    
terminal Object    KEY_IF;
terminal Object    KEY_THEN;
terminal Object    KEY_ELSE;
terminal Object    KEY_WHILE;
terminal Object    KEY_RETURN;
terminal Object    KEY_INT;
terminal Object    KEY_FLOAT;
terminal Object    KEY_CHAR;
terminal Object    KEY_PRINT;
terminal Object    KEY_VOID;


/***** Nao-terminais *****/

non terminal 	Programa				programa;
non terminal 	DeclGlobal				decl_global;
non terminal 	DeclVariavel			decl_variavel;
non terminal 	LinkedList<String>		lista_idents;
non terminal 	LinkedList<String>		resto_lista_idents;
non terminal 	Tipo					tipo;
non terminal 	DeclFuncao				decl_funcao;
non terminal 	Assinatura				assinatura;
non terminal 	LinkedList<DeclVariavel> param_formais;
non terminal 	LinkedList<DeclVariavel> resto_param_formais;
non terminal 	Bloco					bloco;
non terminal 	LinkedList<Comando>		lista_comandos;
non terminal	Comando					comando;
non terminal 	Atribuicao				atribuicao;
non terminal 	Iteracao				iteracao;
non terminal	Decisao					decisao;
non terminal 	Escrita					escrita;
non terminal 	ChamadaFunc				chamada_func_cmd;
non terminal 	Retorno					retorno;
non terminal 	ChamadaFunc				chamada_func;
non terminal	LinkedList<Expressao>	lista_exprs;
non terminal 	LinkedList<Expressao>	resto_lista_exprs;
non terminal 	Expressao 				expressao;
non terminal	Expressao 				expr_basica;


/***** Precedencia e associatividade *****/

precedence left OR, AND; //simbolos de menor precedencia
precedence left IGUAL_QUE, DIFERENTE_QUE, MAIOR_QUE, MENOR_QUE, MAIOR_OU_IGUAL, MENOR_OU_IGUAL;
precedence left SOMA, SUB;     
precedence left MULT, DIV, RESTO;   
precedence left NOT;     //simbolo de maior precedencia


/***** A gramatica *****/

programa ::= programa:p decl_global:d
			{: p.addLast(d); RESULT = p ;  :}
		  |  /* vazio */
		  {: RESULT = new Programa();  :}
          ;


decl_global ::= decl_variavel:declv
				{: RESULT = declv; :}
            | decl_funcao:declf
				{: RESULT = declf; :}
            ;
            
            
decl_variavel ::= tipo:tipo lista_idents:idents PONTO_VIRGULA
					{: RESULT = new DeclVariavel(idents,tipo); :}
               ;


lista_idents ::= IDENTIFICADOR:ident resto_lista_idents:lista 
				{: lista.add(ident);
				   RESULT = lista; :}
             ;


resto_lista_idents ::=  VIRGULA IDENTIFICADOR:ident resto_lista_idents:lista
						{: lista.add(ident);
						   RESULT = lista; :}
                     |  /* vazio */
						{: RESULT = new LinkedList<String>(); :}
                     ;

tipo ::= KEY_INT 
		{: RESULT = Tipo.INT; :}
			 
		| KEY_CHAR
		{: RESULT = Tipo.CHAR; :}
		
		| KEY_FLOAT
		{: RESULT = Tipo.FLOAT; :}
		
		;
		
decl_funcao ::= assinatura:ass bloco:bloc
				{: RESULT = new DeclFuncao(ass,bloc); :}
				;
		
assinatura ::= tipo:tipo IDENTIFICADOR:iden ABRE_PAR param_formais:param FECHA_PAR
				{: RESULT = new Assinatura(iden,param,tipo); :}
				
             | KEY_VOID IDENTIFICADOR:iden ABRE_PAR param_formais:param FECHA_PAR
             {: RESULT = new Assinatura(iden,param); :}

             ;
             

param_formais ::= IDENTIFICADOR:ident DOIS_PONTOS tipo:tipo resto_param_formais:params
					{: params.add(new DeclVariavel(ident,tipo));
					   RESULT = params;
					    :}
                | /*vazio*/
					{: RESULT = new LinkedList<DeclVariavel>(); :}
                ;	
                	
		
resto_param_formais ::= VIRGULA IDENTIFICADOR:ident DOIS_PONTOS tipo:tipo resto_param_formais:params
						{: params.add(new DeclVariavel(ident,tipo));
							RESULT = params; :}
                      | /*vazio*/
						{: RESULT = new LinkedList<DeclVariavel>(); :}
                      ; 
                      		
		
bloco ::= ABRE_CHAVE lista_comandos:com FECHA_CHAVE 
				{: RESULT = new Bloco(com); :}
			;		
			
		
lista_comandos ::= lista_comandos:list comando:com
					{: list.add(com);
						RESULT = list; :}
				   | /*vazio*/
				   {: RESULT = new LinkedList<Comando>(); :}
                 ;		
                 
		
comando  ::= decl_variavel:declv
			{: RESULT = declv; :}
			
           | atribuicao:atr
           {: RESULT = atr; :}
		
           | iteracao:itr
           {: RESULT = itr; :}
      
           | decisao:dec
           {: RESULT = dec; :}

           | escrita:esc
           {: RESULT = esc; :}

           | retorno:ret
           {: RESULT = ret; :}

           | bloco:blo
           {: RESULT = blo; :}

           | chamada_func_cmd:func
           {: RESULT = func; :}

           ;
           
           
atribuicao ::= IDENTIFICADOR:ident ATRIBUICAO expressao:expr PONTO_VIRGULA 
               {: RESULT = new Atribuicao(ident,expr); :}
				;    
				       
           
iteracao ::= KEY_WHILE ABRE_PAR expressao:expr FECHA_PAR comando:com 
			 {: RESULT = new Iteracao(expr,com); :}
			; 
           
           
decisao ::= KEY_IF expressao:expr KEY_THEN comando:com_if KEY_ELSE comando:com_else
			{: RESULT = new Decisao(expr,com_if,com_else); :}
			
            | KEY_IF expressao:expr KEY_THEN comando:com_if
            {: RESULT = new Decisao(expr,com_if); :}
            ;
   

escrita ::= KEY_PRINT ABRE_PAR lista_exprs:exprs FECHA_PAR PONTO_VIRGULA 
			{: RESULT = new Escrita(exprs); :}
			;           


chamada_func_cmd ::= chamada_func:func PONTO_VIRGULA 
					 {: RESULT = func; :}

					;

					
retorno ::= KEY_RETURN expressao:expr PONTO_VIRGULA 
			{: RESULT = new Retorno(expr); :}
			;

			
chamada_func ::= IDENTIFICADOR:ident ABRE_PAR lista_exprs:exprs FECHA_PAR 
				 {: RESULT = new ChamadaFunc(ident,exprs); :}
				;

			
lista_exprs ::= expressao:expr resto_lista_exprs:exprs
				{: exprs.add(expr);
					RESULT = exprs; :}
              | /*vazio*/
			  {: RESULT = new LinkedList<Expressao>(); :}
			  
              ; 
			
			
resto_lista_exprs ::= resto_lista_exprs:exprs VIRGULA expressao:expr
					  {: exprs.add(expr);
							RESULT = exprs; :}
                    | /*vazio*/
					{: RESULT = new LinkedList<Expressao>(); :}
					
                    ;
			
			
expressao ::= expressao:expr1 SOMA expressao:expr2
				{: RESULT = new ExprAritmetica(expr1,expr2,"+"); :}
        
        | expressao:expr1 SUB expressao:expr2
        {: RESULT = new ExprAritmetica(expr1,expr2,"-"); :}
        
        | expressao:expr1 MULT expressao:expr2
        {: RESULT = new ExprAritmetica(expr1,expr2,"*"); :}
        
        | expressao:expr1 DIV expressao:expr2
        {: RESULT = new ExprAritmetica(expr1,expr2,"/"); :}
        
        | expressao:expr1 RESTO expressao:expr2
        {: RESULT = new ExprAritmetica(expr1,expr2,"%"); :}
        
        | expressao:expr1 AND expressao:expr2
        {: RESULT = new ExprLogica(expr1,expr2,"and"); :}
        
        | expressao:expr1 OR expressao:expr2
        {: RESULT = new ExprLogica(expr1,expr2,"or"); :}
        
        | expressao:expr1 IGUAL_QUE expressao:expr2
        {: RESULT = new ExprRelacional(expr1,expr2,"=="); :}
        
        | expressao:expr1 DIFERENTE_QUE expressao:expr2
        {: RESULT = new ExprRelacional(expr1,expr2,"!="); :}
        
        | expressao:expr1 MENOR_QUE expressao:expr2
        {: RESULT = new ExprRelacional(expr1,expr2,"<"); :}
        
        | expressao:expr1 MENOR_OU_IGUAL expressao:expr2
        {: RESULT = new ExprRelacional(expr1,expr2,"<="); :}
        
        | expressao:expr1 MAIOR_OU_IGUAL expressao:expr2
        {: RESULT = new ExprRelacional(expr1,expr2,">="); :}
        
        | expressao:expr1 MAIOR_QUE expressao:expr2
        {: RESULT = new ExprRelacional(expr1,expr2,">"); :}
        
        | expr_basica:expr
		{: RESULT = expr; :}
        ;


expr_basica ::= ABRE_PAR expressao:expr FECHA_PAR 
             {: RESULT = expr; :}
         | NOT expr_basica:expr
         {: RESULT = new ExpUnaria("!",expr); :}
		
         | SUB expr_basica:expr
         {: RESULT = new ExpUnaria("-",expr); :}
         
         | INT_LITERAL:lexeme
         {: RESULT = new IntLiteral(Integer.parseInt(lexeme)); :}
         
         | CHAR_LITERAL:lexeme
         {: RESULT = new CharLiteral(lexeme); :}
         
         | FLOAT_LITERAL:lexeme
         {: RESULT = new FloatLiteral(Float.valueOf(lexeme)); :}
         
         | IDENTIFICADOR:lexeme
         {: RESULT = new ExprIdentificador(lexeme); :}
         
         | chamada_func:func
         {: RESULT = func; :}
         
         ;
         